#!/usr/bin/env python3

"""
This is the main file for the WcTool. We will implement Linux WC tool in
Python. We will use the argparse module to parse the command line arguments.
"""

# Importing the required modules
import argparse
import os
import subprocess


# Defining the Constants

INPUT_FILE_PATH_DIR = "/Users/rkathawate/Desktop/Rakshit_Projects/SoftwareCodingChallenges/WcTool"

# Defining the worker functions

#write docstring 

def count_bytes(filepath):
    """
    Counts the number of bytes in the file object provided.

    Args:
        filepath (str): The path to the file to be processed.

    Returns:
        int: The number of bytes in the file.
    """
    #count bytes in the file object provided
    file_object = open_file(filepath, "rb")
    if file_object is None:
        print("File not found.")
        return None

    file_bytes = file_object.read()
    close_file(file_object)
    return len(file_bytes)
    
def validate_command(command, expected_output):
    """
    Validates the command output against the expected output.

    Args:
        command (str): The command to be executed.
        expected_output (str): The expected output of the command.

    Returns:
        bool: True if the command output matches the expected output, False otherwise.
    """
    try:
        output = subprocess.check_output(command, shell=True)
        output = output.decode("utf-8").strip()
        # print("Output: ", output)
    except subprocess.CalledProcessError as e:
        print("Error executing command: ", command)
        print("Error message: ", e.output)
        return False
    else:
        expected_output = expected_output.strip()
        if output == expected_output:
            print("Command Output validated successfully.")
            return True
        else:
            print("Error executing command: ", command)
            print("Expected output: ", expected_output)
            print("Actual output: ", output.decode("utf-8"))
            return False

def open_file(filepath, option):
    """
    Opens the file and returns the file object.

    Args:
        filepath (str): The path to the file to be opened.
        option (str): The mode in which the file is to be opened.

    Returns:
        file object: The file object if the file is found, None otherwise.
    """
    #open file and return file object
    try:
        file_object = open(filepath, option)
    except FileNotFoundError:
        print("File not found.")
        return None
    else:
        return file_object
    
def close_file(file_object):
    """
    Closes the file object.

    Args:
        file_object (file object): The file object to be closed.

    Returns:
        None
    """
    #close file object
    file_object.close()
    return


# Defining the main function
def main():
    """
    The main function that parses the command line arguments and executes the appropriate command.
    """
    parser = argparse.ArgumentParser(description="This is a Python implementation of the Linux WC tool.")
    parser.add_argument("filename", help="Name of the file to be processed.")
    parser.add_argument("-c", "--bytes", help="Count the number of bytes in the file.", action="store_true")
    args = parser.parse_args()
    print("The name of the file is: ", args.filename)
    filepath = os.path.join(INPUT_FILE_PATH_DIR, args.filename)
    print("The filepath is: ", filepath)
    if args.bytes:
        file_bytes = count_bytes(filepath)
        expected_output = str(file_bytes) + " " + filepath + "\n"
        print("Command Output: ", expected_output)
        command = "wc -c " + filepath
        validate_command(command, expected_output)
        


# Calling the main function
if __name__ == "__main__":
    main()